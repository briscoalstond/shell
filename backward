import numpy as np

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.W1 = np.random.randn(input_size, hidden_size)
        self.b1 = np.zeros((1, hidden_size))
        self.W2 = np.random.randn(hidden_size, output_size)
        self.b2 = np.zeros((1, output_size))
    
    def sigmoid(self, z):
        return 1 / (1 + np.exp(-z))
    
    def sigmoid_derivative(self, z):
        return self.sigmoid(z) * (1 - self.sigmoid(z))
    
    def forward(self, X):
        self.z1 = np.dot(X, self.W1) + self.b1
        self.a1 = self.sigmoid(self.z1)
        self.z2 = np.dot(self.a1, self.W2) + self.b2
        self.a2 = self.sigmoid(self.z2)
        return self.a2
    
    def backward(self, X, y, output, learning_rate):
        error = y - output
        d_z2 = error * self.sigmoid_derivative(self.z2)
        d_W2 = np.dot(self.a1.T, d_z2)
        d_b2 = np.sum(d_z2, axis=0, keepdims=True)
        error_hidden = np.dot(d_z2, self.W2.T)
        d_z1 = error_hidden * self.sigmoid_derivative(self.z1)
        d_W1 = np.dot(X.T, d_z1)
        d_b1 = np.sum(d_z1, axis=0, keepdims=True)
        
        self.W1 += learning_rate * d_W1
        self.b1 += learning_rate * d_b1
        self.W2 += learning_rate * d_W2
        self.b2 += learning_rate * d_b2

# 示例使用：使用异或（XOR）数据训练简单神经网络
if __name__ == "__main__":
    nn = NeuralNetwork(input_size=2, hidden_size=3, output_size=1)
    X = np.array([[0,0],[0,1],[1,0],[1,1]])
    y = np.array([[0],[1],[1],[0]])
    for i in range(10000):
        output = nn.forward(X)
        nn.backward(X, y, output, learning_rate=0.1)
    print("预测结果:", nn.forward(X))
